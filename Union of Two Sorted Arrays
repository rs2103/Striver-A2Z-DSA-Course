Union of Two Sorted Arrays
Example 1:

Input: 
n = 5, arr1[] = {1, 2, 3, 4, 5}  
m = 5, arr2 [] = {1, 2, 3, 6, 7}
Output: 
1 2 3 4 5 6 7
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5 6 7.

Your Task: 
You do not need to read input or print anything. Complete the function findUnion() that takes two arrays arr1[], arr2[],
and their size n and m as input parameters and returns a list containing the union of the two arrays.

Expected Time Complexity: O(n+m).
Expected Auxiliary Space: O(n+m).

class Solution
{
    //Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m)
    {
        ArrayList<Integer> unionList = new ArrayList<>();
        int i = 0, j = 0;
        
        // Traverse both arrays
        while(i < n && j < m){
            // Skip duplicates in arr1
            while(i > 0 && i < n && arr1[i] == arr1[i-1]) i++;
            // Skip duplicates in arr2
            while(j > 0 && j < m && arr2[j] == arr2[j-1]) j++;
            
            if(i < n && j < m){
                if(arr1[i] < arr2[j]){
                    unionList.add(arr1[i]);
                    i++;
                } else if(arr1[i] > arr2[j]){
                    unionList.add(arr2[j]);
                    j++;
                } else {
                    unionList.add(arr1[i]);
                    i++;
                    j++;
                }
            }
        }
        
        // Add remaining elements of arr1
        while(i < n){
            if(i == 0 || arr1[i] != arr1[i-1]){
                unionList.add(arr1[i]);
            }
            i++;
        }
        
        // Add remaining elements of arr2
        while(j < m){
            if(j == 0 || arr2[j] != arr2[j-1]){
                unionList.add(arr2[j]);
            }
            j++;
        }
        
        return unionList;
    }
}
